provider "aws" {
  region = "us-east-1"
  # Your AWS profile name goes below  - assuming you have AWS CLI setup
  # You can run powershell command "aws configure --profile <PROFILENAME>"
  # Run prior to initializing terraform to avoid errors
  profile = "Moko"
}

variable "subnet_prefix" {
  description = "cidr block for the subnet"
}
variable "elip_address" {
  description = "elastic IP address"
}

resource "aws_vpc" "prod_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "production"
  }
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.prod_vpc.id
}


resource "aws_route_table" "prod_route_table" {
  vpc_id = aws_vpc.prod_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "prod"
  }
}

resource "aws_subnet" "subnet_1" {
  vpc_id            = aws_vpc.prod_vpc.id
  cidr_block        = var.subnet_prefix[0]
  availability_zone = "us-east-1a"
  tags = {
    Name = "prod_subnet"
  }
}
resource "aws_subnet" "subnet_2" {
  vpc_id            = aws_vpc.prod_vpc.id
  cidr_block        = var.subnet_prefix[1]
  availability_zone = "us-east-1a"
  tags = {
    Name = "dev_subnet"
  }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet_1.id
  route_table_id = aws_route_table.prod_route_table.id
}

resource "aws_security_group" "allow_web" {
  name        = "allow_web_traffic"
  description = "Allow web traffic"
  vpc_id      = aws_vpc.prod_vpc.id

  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_web"
  }
}

resource "aws_network_interface" "web_server_nic" {
  subnet_id       = aws_subnet.subnet_1.id
  private_ips     = [var.elip_address]
  security_groups = [aws_security_group.allow_web.id]

}

resource "aws_eip" "elip" {
  vpc                       = true
  network_interface         = aws_network_interface.web_server_nic.id
  associate_with_private_ip = var.elip_address
  depends_on = [
    aws_internet_gateway.gw
  ]
}

resource "aws_instance" "web-server-instance-1" {
  ami               = "ami-09e67e426f25ce0d7"
  instance_type     = "t2.micro"
  availability_zone = "us-east-1a"
  # Your private AWS key name goes below, can be generated by running 
  # aws ec2 create-key-pair --key-name MyKeyPair --profile <YourProfileName>
  # Make sure to save in safe place and not expose to internet
  key_name = "Terror_key"
  network_interface {
    device_index         = 0
    network_interface_id = aws_network_interface.web_server_nic.id
  }
  user_data = <<-EOF
                #!/bin/bash
                sudo apt update -y
                sudo apt install -y apache2
                sudo systemctl start apache2
                sudo echo Hello World from $(hostname -f) > /var/www/html/index.html
                EOF
  tags = {
    Name = "web_server"
  }
}


output "server_priv_ip" {
  value = aws_instance.web-server-instance-1.private_ip
}
output "server_priv_id" {
  value = aws_instance.web-server-instance-1.id
}
